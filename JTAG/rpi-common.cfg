transport select jtag
jtag_ntrst_delay 500

reset_config trst_and_srst

set code_entry 0x80000

proc load_kernel {} {
  global _CHIPNAME
  global script_path
  global code_entry
  targets $_CHIPNAME.cpu3 # switch to a core we know is using phys addressing
  set kernel_image [file dirname $script_path]/kernel8-rpi4.img
  load_image $kernel_image $code_entry
}

# We don't use the prgm argument here, but we define this
# routine for IDE support
proc program {prgm} {
  global code_entry
  init
  reset init
  load_kernel
  resume $code_entry
}

# Does what 'program' does without immediately resuming execution
proc load {} {
  global code_entry
  init
  reset init
  load_kernel
  reg pc $code_entry
}

# Only use from command line; IDE's get confused
proc reboot {} {
  init
  global _CHIPNAME
  targets $_CHIPNAME.cpu0
  halt
  # The reboot sequence must be the last thing this command does;
  #  anything that comes after won't be executed, as OpenOCD will
  #  become disconnected for a couple seconds until the ARM cores
  #  come back online.
  mww phys 0x3f100024 0x5a000001
  mww phys 0x3f10001c 0x5a000020
}

proc run {} {
  global code_entry
  resume $code_entry
}